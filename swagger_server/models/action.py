# coding: utf-8
# type: ignore
# pylint: disable-all
from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ACTION(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, mgs: str = None, bot_name: str = None, channel: str = None, intent: str = None, entities: object = None, email: str = None, user: str = None, time: str = None, context_on: bool = None, action_info: object = None, message_id: object = None):  # noqa: E501
        """ACTION - a model defined in Swagger

        :param mgs: The mgs of this ACTION.  # noqa: E501
        :type mgs: str
        :param bot_name: The bot_name of this ACTION.  # noqa: E501
        :type bot_name: str
        :param channel: The channel of this ACTION.  # noqa: E501
        :type channel: str
        :param intent: The intent of this ACTION.  # noqa: E501
        :type intent: str
        :param entities: The entities of this ACTION.  # noqa: E501
        :type entities: object
        :param email: The email of this ACTION.  # noqa: E501
        :type email: str
        :param user: The user of this ACTION.  # noqa: E501
        :type user: str
        :param time: The time of this ACTION.  # noqa: E501
        :type time: str
        :param context_on: The context_on of this ACTION.  # noqa: E501
        :type context_on: bool
        :param action_info: The action_info of this ACTION.  # noqa: E501
        :type action_info: object
        :param message_id: The message_id of this ACTION.  # noqa: E501
        :type message_id: object
        """
        self.swagger_types = {
            'mgs': str,
            'bot_name': str,
            'channel': str,
            'intent': str,
            'entities': object,
            'email': str,
            'user': str,
            'time': str,
            'context_on': bool,
            'action_info': object,
            'message_id': object
        }

        self.attribute_map = {
            'mgs': 'mgs',
            'bot_name': 'botName',
            'channel': 'channel',
            'intent': 'intent',
            'entities': 'entities',
            'email': 'email',
            'user': 'user',
            'time': 'time',
            'context_on': 'contextOn',
            'action_info': 'actionInfo',
            'message_id': 'message_id'
        }

        self._mgs = mgs
        self._bot_name = bot_name
        self._channel = channel
        self._intent = intent
        self._entities = entities
        self._email = email
        self._user = user
        self._time = time
        self._context_on = context_on
        self._action_info = action_info
        self._message_id = message_id

    @classmethod
    def from_dict(cls, dikt) -> 'ACTION':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ACTION of this ACTION.  # noqa: E501
        :rtype: ACTION
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mgs(self) -> str:
        """Gets the mgs of this ACTION.


        :return: The mgs of this ACTION.
        :rtype: str
        """
        return self._mgs

    @mgs.setter
    def mgs(self, mgs: str):
        """Sets the mgs of this ACTION.


        :param mgs: The mgs of this ACTION.
        :type mgs: str
        """

        self._mgs = mgs

    @property
    def bot_name(self) -> str:
        """Gets the bot_name of this ACTION.


        :return: The bot_name of this ACTION.
        :rtype: str
        """
        return self._bot_name

    @bot_name.setter
    def bot_name(self, bot_name: str):
        """Sets the bot_name of this ACTION.


        :param bot_name: The bot_name of this ACTION.
        :type bot_name: str
        """

        self._bot_name = bot_name

    @property
    def channel(self) -> str:
        """Gets the channel of this ACTION.


        :return: The channel of this ACTION.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel: str):
        """Sets the channel of this ACTION.


        :param channel: The channel of this ACTION.
        :type channel: str
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def intent(self) -> str:
        """Gets the intent of this ACTION.


        :return: The intent of this ACTION.
        :rtype: str
        """
        return self._intent

    @intent.setter
    def intent(self, intent: str):
        """Sets the intent of this ACTION.


        :param intent: The intent of this ACTION.
        :type intent: str
        """
        if intent is None:
            raise ValueError("Invalid value for `intent`, must not be `None`")  # noqa: E501

        self._intent = intent

    @property
    def entities(self) -> object:
        """Gets the entities of this ACTION.


        :return: The entities of this ACTION.
        :rtype: object
        """
        return self._entities

    @entities.setter
    def entities(self, entities: object):
        """Sets the entities of this ACTION.


        :param entities: The entities of this ACTION.
        :type entities: object
        """
        if entities is None:
            raise ValueError("Invalid value for `entities`, must not be `None`")  # noqa: E501

        self._entities = entities

    @property
    def email(self) -> str:
        """Gets the email of this ACTION.


        :return: The email of this ACTION.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ACTION.


        :param email: The email of this ACTION.
        :type email: str
        """

        self._email = email

    @property
    def user(self) -> str:
        """Gets the user of this ACTION.


        :return: The user of this ACTION.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this ACTION.


        :param user: The user of this ACTION.
        :type user: str
        """

        self._user = user

    @property
    def time(self) -> str:
        """Gets the time of this ACTION.


        :return: The time of this ACTION.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time: str):
        """Sets the time of this ACTION.


        :param time: The time of this ACTION.
        :type time: str
        """

        self._time = time

    @property
    def context_on(self) -> bool:
        """Gets the context_on of this ACTION.


        :return: The context_on of this ACTION.
        :rtype: bool
        """
        return self._context_on

    @context_on.setter
    def context_on(self, context_on: bool):
        """Sets the context_on of this ACTION.


        :param context_on: The context_on of this ACTION.
        :type context_on: bool
        """

        self._context_on = context_on

    @property
    def action_info(self) -> object:
        """Gets the action_info of this ACTION.


        :return: The action_info of this ACTION.
        :rtype: object
        """
        return self._action_info

    @action_info.setter
    def action_info(self, action_info: object):
        """Sets the action_info of this ACTION.


        :param action_info: The action_info of this ACTION.
        :type action_info: object
        """
        if action_info is None:
            raise ValueError("Invalid value for `action_info`, must not be `None`")  # noqa: E501

        self._action_info = action_info

    @property
    def message_id(self) -> object:
        """Gets the message_id of this ACTION.


        :return: The message_id of this ACTION.
        :rtype: object
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id: object):
        """Sets the message_id of this ACTION.


        :param message_id: The message_id of this ACTION.
        :type message_id: object
        """

        self._message_id = message_id
